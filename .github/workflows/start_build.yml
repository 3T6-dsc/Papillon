name: Start Build Process

on:
  workflow_dispatch:

jobs:
  clean:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: AutoModality/action-clean@v1

      - name: Clean environment
        run: |
          rm -rf node_modules
          rm -rf ios/build
          rm -rf ~/Library/Developer/Xcode/DerivedData
          rm -rf android/app/build
          rm -rf $HOME/.gradle/caches/

      - name: List available artifacts
        uses: actions/github-script@v6
        with:
          github-token: ${{secrets.GITHUB_TOKEN}}
          script: |
            const artifacts = await github.rest.actions.listArtifactsForRepo({
              owner: context.repo.owner,
              repo: context.repo.repo,
            });
            console.log('Available artifacts:', artifacts.data.artifacts.map(a => a.name));

  build_ios:
    needs: clean
    runs-on: macos-latest
    steps:
      - uses: actions/checkout@v3
      
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'

      - name: Install dependencies
        run: npm ci

      - name: Install Cocoapods
        run: sudo gem install cocoapods

      - name: Install Pods and update Hermes Engine
        run: |
          cd ios
          rm -rf Pods Podfile.lock
          pod install
          pod update hermes-engine --no-repo-update

      - name: Install Apple Certificate
        env:
          BUILD_CERTIFICATE_BASE64: ${{ secrets.IOS_DISTRIBUTION_CERTIFICATE_BASE64 }}
          P12_PASSWORD: ${{ secrets.IOS_DISTRIBUTION_CERTIFICATE_PASSWORD }}
          KEYCHAIN_PASSWORD: ${{ secrets.KEYCHAIN_PASSWORD }}
        run: |
          # Create variables
          CERTIFICATE_PATH=$RUNNER_TEMP/build_certificate.p12
          KEYCHAIN_PATH=$RUNNER_TEMP/app-signing.keychain

          # Import certificate from secrets
          echo -n "$BUILD_CERTIFICATE_BASE64" | base64 --decode > $CERTIFICATE_PATH

          # Create temporary keychain
          security create-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
          security set-keychain-settings -lut 21600 $KEYCHAIN_PATH
          security unlock-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH

          # Add keychain to search list
          security list-keychains -d user -s $KEYCHAIN_PATH $(security list-keychains -d user | sed s/\"//g)

          # Import certificate to keychain
          security import $CERTIFICATE_PATH -P "$P12_PASSWORD" -A -t cert -f pkcs12 -k $KEYCHAIN_PATH

          # Allow codesign to access the keychain
          security set-key-partition-list -S apple-tool:,apple:,codesign: -s -k "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH

          # Clean up
          rm $CERTIFICATE_PATH

      - name: Install Provisioning Profile
        env:
          PROVISIONING_PROFILE_BASE64: ${{ secrets.IOS_PROVISIONING_PROFILE_BASE64 }}
        run: |
          # Create variables
          PP_PATH=$RUNNER_TEMP/build_pp.mobileprovision

          # Import provisioning profile from secrets
          echo -n "$PROVISIONING_PROFILE_BASE64" | base64 --decode --output $PP_PATH
          mkdir -p ~/Library/MobileDevice/Provisioning\ Profiles
          cp $PP_PATH ~/Library/MobileDevice/Provisioning\ Profiles

      - name: Build iOS app
        run: |
          cd ios
          xcodebuild -workspace ios/Papillon.xcworkspace \
                     -scheme Papillon \
                     -configuration Release \
                     -archivePath $PWD/build/Papillon.xcarchive \
                     -allowProvisioningUpdates \
                     clean archive
          xcodebuild -exportArchive -archivePath Papillon.xcarchive -exportOptionsPlist ExportOptions.plist -exportPath ./

      - name: Upload IPA
        uses: actions/upload-artifact@v3
        with:
          name: ios-app
          path: ios/*.ipa

  build_android:
    needs: clean
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'

      - name: Install dependencies
        run: npm ci

      - name: Setup Java
        uses: actions/setup-java@v3
        with:
          distribution: 'zulu'
          java-version: '17'

      - name: Build Android app
        env:
          KEYSTORE_BASE64: ${{ secrets.ANDROID_KEYSTORE_BASE64 }}
          KEYSTORE_PASSWORD: ${{ secrets.ANDROID_KEYSTORE_PASSWORD }}
          KEY_ALIAS: ${{ secrets.ANDROID_KEY_ALIAS }}
        run: |
          # Decode keystore
          echo $KEYSTORE_BASE64 | base64 --decode > android/app/release.keystore
          
          # Build APK and AAB
          cd android
          ./gradlew assembleRelease
          ./gradlew bundleRelease

      - name: List available artifacts
        uses: actions/github-script@v6
        with:
          github-token: ${{secrets.GITHUB_TOKEN}}
          script: |
            const artifacts = await github.rest.actions.listArtifactsForRepo({
              owner: context.repo.owner,
              repo: context.repo.repo,
            });
            console.log('Available artifacts:', artifacts.data.artifacts.map(a => a.name));

      - name: Upload APK
        uses: actions/upload-artifact@v3
        with:
          name: android-apk
          path: android/app/build/outputs/apk/release/app-release.apk

      - name: Upload AAB
        uses: actions/upload-artifact@v3
        with:
          name: android-aab
          path: android/app/build/outputs/bundle/release/app-release.aab


#  trigger_deployment:
#    needs: [build_ios, build_android]
#    runs-on: ubuntu-latest
#    steps:
#      - name: Trigger Stores Deployment
#        uses: actions/github-script@v6
#        with:
#          github-token: ${{secrets.GITHUB_TOKEN}}
#          script: |
#            github.rest.actions.createWorkflowDispatch({
#              owner: context.repo.owner,
#              repo: context.repo.repo,
#              workflow_id: 'stores_deployment.yml',
#              ref: 'main'
#            })