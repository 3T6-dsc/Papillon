name: Checks (TypeScript + ESLint)

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  lint-main:
    name: üõ†Ô∏è TypeScript and ESLint on Main
    runs-on: ubuntu-latest
    if: github.ref == 'refs/remotes/origin/main'
    steps:
      - name: üì• Checkout code
        uses: actions/checkout@v3

      - name: ‚öôÔ∏è Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 20
          cache: 'npm'

      - name: üíæ Install dependencies
        run: npm ci

      - name: üîç Run TypeScript and ESLint checks
        run: |
          tsc > tsc.log 2>&1 || true
          eslint . > eslint.log 2>&1 || true
          cat tsc.log eslint.log > lint.log
        continue-on-error: true

      - name: üìÑ Output Logs
        run: cat lint.log

      - name: üõ†Ô∏è Commit and Push Fixes (Main)
        if: success() || failure()
        run: |
          git config user.name "GitHub Actions"
          git config user.email "actions@github.com"
          if git diff --quiet; then
            echo "No changes to commit."
          else
            git add .
            git commit -m "üîß Auto-fix ESLint issues"
            git push
          fi
      
      - name: üßπ Clean up
        if: always()
        run: rm -f lint.log tsc.log eslint.log

  lint-development:
    name: üõ†Ô∏è TypeScript and ESLint on Pull Request
    runs-on: ubuntu-latest
    if: github.ref != 'refs/remotes/origin/main'
    steps:
      - name: üì• Checkout code
        uses: actions/checkout@v3

      - name: ‚öôÔ∏è Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 18
          cache: 'npm'

      - name: üíæ Install dependencies
        run: npm ci

      - name: üîç Run TypeScript and ESLint checks
        run: |
          npx tsc > tsc.log 2>&1 || true
          npx eslint . > eslint.log 2>&1 || true
          cat tsc.log eslint.log > lint.log
        continue-on-error: true

      - name: üìã Check if lint logs are empty
        id: check_logs
        run: |
          if [ -s lint.log ]; then
            echo "is_empty=false" >> $GITHUB_ENV
          else
            echo "is_empty=true" >> $GITHUB_ENV
          fi

      - name: üìÑ Output Logs
        run: cat lint.log
      
      - name: ‚ùå Request Changes on Pull Request
        if: env.is_empty == 'false'
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const fs = require('fs');
            const lintLogContent = fs.readFileSync('lint.log', 'utf8');
            github.rest.pulls.createReview({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: context.issue.number,
              body: `‚ö†Ô∏è Erreur(s) d√©tect√©e(s) par TypeScript/ESLint !\n\`\`\`\n${lintLogContent}\n\`\`\``,
              event: 'REQUEST_CHANGES'
            });

      - name: ‚úÖ Approve Pull Request
        if: env.is_empty == 'true'
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            github.rest.pulls.createReview({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: context.issue.number,
              body: 'LGTM üëç',
              event: 'APPROVE'
            });

      - name: üßπ Clean up
        if: always()
        run: rm -f lint.log tsc.log eslint.log
